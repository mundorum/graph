{"version":3,"file":"oid-graph-dev.js","sources":["../../src/components/piece.js","../../src/components/node.js","../../src/components/edge.js","../../src/components/layout.js","../../src/components/graph.js","../../src/components/graph-oid.js"],"sourcesContent":["/* <TODO> refactor to avoid DCCContextMenu */\nexport class GraphPiece {\n  _showContextMenu (event) {\n    event.preventDefault()\n    if (this._node.menu) {\n      DCCContextMenu.display(\n        event.clientX, event.clientY, this._node.menu)\n    }\n  }\n}\n","/* A node in an SVG graph\n ************************/\n\nimport { Bus } from '/lib/foundation/oidlib-dev.js'\nimport { GraphPiece } from './piece'\n\nexport class GraphNode extends GraphPiece {\n  constructor (node) {\n    super()\n    this._node = {}\n    Object.assign(this._node, node)\n\n    if (node.width == null)\n      this._node.width =\n        (node.label && node.label.length * 10 + 20 > GraphNode.standardDimensions.width)\n          ? node.label.length * 10 + 20 : GraphNode.standardDimensions.width\n\n    this._nodeClicked = this._nodeClicked.bind(this)\n    this._nodeUnselect = this._nodeUnselect.bind(this)\n    this._showContextMenu = this._showContextMenu.bind(this)  // <TODO> handle context menu\n\n    this._bus = Bus.i\n\n    this._presentation =\n         document.createElementNS('http://www.w3.org/2000/svg', 'g')\n    this._rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect')\n    this._rect.setAttribute('rx', 10)  // <TODO> make customizable\n    this._setDimensions(this._rect)\n    this._rect.classList.add('node')\n    if (node.format != null)\n      this._rect.classList.add(`node-${node.format}`)\n    this._presentation.appendChild(this._rect)\n\n    if (node.label != null) {\n      this._contentSpace = document.createElementNS(\n        'http://www.w3.org/2000/svg', 'foreignObject')\n      this._setDimensions(this._contentSpace)\n      this._label = document.createElement('div')\n      this._label.style = `width:${this._node.width}px;height:${this._node.height}px`\n      const tf = (node.format != null) ? ` node-primary-${node.format}` : ''\n      this._label.innerHTML = `<div class=\"node-title node-primary${tf}\">${node.label}</div>`\n      this._contentSpace.appendChild(this._label)\n      this._presentation.appendChild(this._contentSpace)\n    }\n\n    this._cover = document.createElementNS('http://www.w3.org/2000/svg', 'rect')\n    this._cover.setAttribute('rx', 10)  // <TODO> make customizable\n    this._setDimensions(this._cover)\n    this._cover.classList.add('node-cover')\n    this._presentation.appendChild(this._cover)\n\n    this._presentation.addEventListener('contextmenu', this._showContextMenu)\n\n    this._setPosition()\n  }\n\n  get id () {\n    return this._node.id\n  }\n\n  get x () {\n    return this._node.x\n  }\n\n  set x (newValue) {\n    this._node.x = newValue\n    this._setPosition()\n  }\n\n  get y () {\n    return this._node.y\n  }\n\n  set y (newValue) {\n    this._node.y = newValue\n    this._setPosition()\n  }\n\n  get width () {\n    return this._node.width\n  }\n\n  set width (newValue) {\n    this._graphAttr('width', newValue)\n  }\n\n  get height () {\n    return this._node.height\n  }\n\n  set height (newValue) {\n    this._graphAttr('height', newValue)\n  }\n\n  get action () {\n    return this._action\n  }\n\n  set action (newValue) {\n    this._action = newValue\n    this._presentation.style.cursor = 'pointer'\n    this._presentation.addEventListener('click', this._nodeClicked)\n  }\n\n  get bus () {\n    return this._bus\n  }\n\n  set bus (newValue) {\n    this._bus = newValue\n  }\n\n  get graph () {\n    return this._graph\n  }\n\n  set graph (newValue) {\n    if (this._graph != null)\n      this._presentation.removeChild(this._graph.presentation)\n     else {\n      this._label.classList.remove('dcc-node-label-theme')\n      this._label.classList.add('dcc-node-label-group-theme')\n    }\n    this._graph = newValue\n    this._presentation.appendChild(this._graph.presentation)\n  }\n\n  get graphWidth () {\n    return this._node.width\n  }\n\n  set graphWidth (newValue) {\n    this._graphAttr('width', newValue)\n  }\n\n  get graphHeight () {\n    return this._node.height\n  }\n\n  set graphHeight (newValue) {\n    this._graphAttr('height', newValue)\n  }\n\n  get presentation () {\n    return this._presentation\n  }\n\n  _graphAttr (attr, value) {\n    this._node[attr] = value\n    this._rect.setAttribute(attr, value)\n    this._cover.setAttribute(attr, value)\n    if (this._contentSpace != null) {\n      this._contentSpace.setAttribute(attr, value)\n      this._label.style = 'width:' + this._node.width +\n            'px;height:' + ((this._graph)\n        ? GraphLayoutDG.parameters['node-label-height']\n        : this._node.height) + 'px'\n    }\n  }\n\n  _setPosition () {\n    this._presentation.setAttribute('transform',\n      'translate(' +\n         ((this.x != null) ? this.x : GraphNode.standardDimensions.x) + ' ' +\n         ((this.y != null) ? this.y : GraphNode.standardDimensions.y) + ')')\n  }\n\n  _setDimensions (element) {\n    element.setAttribute('width',\n      (this.width != null) ? this.width : GraphNode.standardDimensions.width)\n    element.setAttribute('height',\n      (this.height != null) ? this.height : GraphNode.standardDimensions.height)\n  }\n\n  addPiece (type, piece) {\n    if (this._graph != null) { this._graph.addPiece(type, piece) }\n  }\n\n  // <TODO> redesign the events schema\n  _nodeClicked (event) {\n    event.stopPropagation()\n    DCCContextMenu.close()  // <TODO> handle context menu\n    this._bus.publish('graph/select/clear')\n    this._cover.classList.remove('dcc-node-cover-theme')\n    this._cover.classList.add('dcc-node-selected-theme')\n    this._bus.subscribe('graph/select/clear', this._nodeUnselect)\n    this._bus.publish(this._action, this.id, true)\n  }\n\n  // <TODO> redesign the events schema\n  _nodeUnselect () {\n    this._bus.unsubscribe('graph/select/clear', this._nodeUnselect)\n    this._cover.classList.remove('dcc-node-selected-theme')\n    this._cover.classList.add('dcc-node-cover-theme')\n  }\n\n  _nodeContext (event) {\n\n  }\n}\n\nGraphNode.standardDimensions = {\n  x: 0,\n  y: 0,\n  width: 100,\n  height: 50\n}\n","/* An edge in an SVG graph\n *************************/\n\nimport { GraphPiece } from './piece'\n\nexport class GraphEdge extends GraphPiece {\n  static create (edge, graph) {\n    let edgeObj = null\n    const lyt = (graph._layout.label != null) ? graph._layout.label : 'dg'\n    switch (lyt) {\n      case 'dg': edgeObj = new GraphEdge(edge, graph); break\n      case 'vh': edgeObj = new GraphEdgeVH(edge, graph)\n    }\n    return edgeObj    \n  }\n\n  constructor (edge, graph) {\n    super()\n    this._edge = {}\n    if (graph != null && edge.source && edge.target) {\n      const sourceIndex = graph.nodes.findIndex(node => node.id === edge.source)\n\n      if (sourceIndex > -1) {\n        let targetIndex = -1\n        switch (edge.target) {\n          case '#previous':\n            if (sourceIndex > 0) { targetIndex = sourceIndex - 1 }\n            break\n          case '#next':\n            if (sourceIndex < graph.nodes.length - 1) { targetIndex = sourceIndex + 1 }\n            break\n          default: {\n            let tg = edge.target\n            // search in the current level and upper levels\n            do {\n              targetIndex =\n                        graph.nodes.findIndex(node => node.id === tg)\n              if (targetIndex === -1 && tg.includes('.'))\n                tg = tg.substring(0, tg.lastIndexOf('.'))\n              else\n                tg = null\n            } while (tg != null)\n            break\n          }\n        }\n\n        if (targetIndex > -1) {\n          edge.source = graph.nodes[sourceIndex]\n          edge.target = graph.nodes[targetIndex]\n          Object.assign(this._edge, edge)\n\n          this._presentation = document.createElementNS(\n            'http://www.w3.org/2000/svg', 'g')\n          this._line = document.createElementNS(\n            'http://www.w3.org/2000/svg', 'polyline')\n          this._line.setAttribute('fill', 'none')\n          this._line.classList.add('edge')\n          this._presentation.appendChild(this._line)\n\n          if (edge.label != null) {\n            this._labelText = document.createTextNode(edge.label)\n            this._label = document.createElementNS(\n              'http://www.w3.org/2000/svg', 'text')\n            this._label.appendChild(this._labelText)\n            this._presentation.appendChild(this._label)\n          }\n\n          this.update()\n        }\n      }\n    }\n  }\n\n  get source () {\n    return this._edge.source\n  }\n\n  get target () {\n    return this._edge.target\n  }\n\n  get presentation () {\n    return this._presentation\n  }\n\n  update () {\n    if (this._edge.source != null && this._edge.target != null) {\n      const source = this._edge.source\n      const target = this._edge.target\n      const x1 = source.x + source.width / 2\n      const y1 = source.y + source.height\n      const x2 = target.x + target.width / 2\n      const y2 = target.y\n      // <TODO> provisory\n      if (y2 > y1) {\n        this._line.setAttribute('points', `${x1},${y1} ${x2},${y2}`)\n        if (this._label != null) {\n          this._label.setAttribute('x', (x1 + x2) / 2)\n          this._label.setAttribute('y', (y1 + y2) / 2)\n          this._labelText.nodeValue = this._edge.label\n        }\n      }\n    }\n  }\n}\n\nclass GraphEdgeVH extends GraphEdge {\n  update () {\n    if (this._edge.source != null && this._edge.target != null) {\n      const source = this._edge.source\n      const target = this._edge.target\n      const x1 = source.x + (target.x - source.x) / 2\n      const y1 = source.y + source.height\n      const x2 = target.x\n      const y2 = target.y + target.height / 2\n      this._line.setAttribute('points', `${x1},${y1} ${x1},${y2} ${x2},${y2}`)\n      if (this._label != null) {\n        this._label.setAttribute('x', (x1 + x2) / 2)\n        this._label.setAttribute('y', (y1 + y2) / 2)\n        this._labelText.nodeValue = this._edge.label\n      }\n    }\n  } \n}\n\n","/* Auto-organize a graph in a layout\n ***********************************/\nexport class GraphLayout {\n  static create (layout) {\n    let layoutObj = null\n    const lyt = (layout != null) ? layout : 'dg'\n    switch (lyt) {\n      case 'dg': layoutObj = new GraphLayoutDG(); break\n      case 'vh': layoutObj = new GraphLayoutVH()\n    }\n    return layoutObj\n  }\n\n  attach (graph) {\n    this._graph = graph\n  }\n}\n\nGraphLayout.parameters = {\n  subgraphs: 'vertical',\n  'node-width': 75,\n  'node-height': 42,\n  'node-label-height': 30,\n  'node-horizontal-spacing': 10,\n  'node-vertical-spacing': 30,\n  'horizontal-margin': 10,\n  'vertical-margin': 10\n}\n\n/* Directed Graph Auto-organizer\n *******************************/\nclass GraphLayoutDG extends GraphLayout {\n  get label () {\n    return 'dg'\n  }\n\n  organize () {\n    const param = {\n      subgraphs: GraphLayoutDG.parameters.subgraphs,\n      width: GraphLayoutDG.parameters['node-width'],\n      height: GraphLayoutDG.parameters['node-height'],\n      hmargin: GraphLayoutDG.parameters['horizontal-margin'],\n      vmargin: GraphLayoutDG.parameters['vertical-margin'],\n      hspace: GraphLayoutDG.parameters['node-horizontal-spacing'],\n      vspace: GraphLayoutDG.parameters['node-vertical-spacing']\n    }\n    for (const node of this._graph.nodes)\n      node.level = -1\n    let next = this._graph.nodes[0]\n    let shiftX = 0\n    let shiftY = this._graph.labelHeight\n    let maxX = 0\n    let maxY = 0\n    do {\n      const dim = this._visit(next, 0, shiftX, shiftY, param)\n      if (param.subgraphs === 'horizontal') {\n        shiftX += dim.horizontal\n        maxX = shiftX\n        shiftY = 0\n        maxY = (maxY < dim.vertical) ? dim.vertical : maxY\n      } else {\n        shiftX = 0\n        maxX = (maxX < dim.horizontal) ? dim.horizontal : maxX\n        shiftY += dim.vertical\n        maxY = shiftY\n      }\n      next = this._graph.nodes.find(node => node.level === -1)\n    } while (next != null)\n\n    const container = this._graph._container\n    this._graph.width = (container?.label && container.width &&\n                         container.width > maxX + param.hmargin)\n      ? container.width : maxX + param.hmargin\n    this._graph.height = maxY + param.vmargin\n\n    for (const edge of this._graph.edges)\n      edge.update()\n  }\n\n  _visit (node, level, shiftX, shiftY, param) {\n    node.level = level\n    if (node.width == null) node.width = param.width\n    if (node.height == null) node.height = param.height\n    const children =\n         this._graph.edges.filter(edge => edge.source === node)\n    let horizontal = node.width + param.hspace\n    const vertical = node.height + param.vspace\n    let cHorizontal = 0\n    let cVertical = 0\n    if (children.length > 0) {\n      for (const ch of children) {\n        if (ch.target !== ch.source && ch.target.level === -1) {\n          const dim = this._visit(\n            ch.target, level + 1,\n            shiftX + cHorizontal, shiftY + vertical, param)\n          cHorizontal += dim.horizontal\n          cVertical =\n                  (cVertical < dim.vertical) ? dim.vertical : cVertical\n        }\n      }\n    }\n    node.x = param.hmargin + shiftX\n    if (horizontal < cHorizontal) {\n      node.x += (cHorizontal - horizontal) / 2\n      horizontal = cHorizontal\n    }\n    node.y = param.vmargin + shiftY\n    return { horizontal: horizontal, vertical: vertical + cVertical }\n  }\n}\n\nGraphLayoutDG.parameters = GraphLayout.parameters\n\n/* Vertical Hierarchy Auto-organizer\n ***********************************/\nclass GraphLayoutVH extends GraphLayout {\n  get label () {\n    return 'vh'\n  }\n\n  organize () {\n    const param = {\n      width: GraphLayoutVH.parameters['node-width'],\n      height: GraphLayoutVH.parameters['node-height'],\n      hmargin: GraphLayoutVH.parameters['horizontal-margin'],\n      vmargin: GraphLayoutVH.parameters['vertical-margin'],\n      hspace: GraphLayoutVH.parameters['node-horizontal-spacing'],\n      vspace: GraphLayoutVH.parameters['node-vertical-spacing']\n    }\n    for (const node of this._graph.nodes)\n      node.level = -1\n    let next = this._graph.nodes[0]\n    let shiftX = param.hmargin\n    let shiftY = this._graph.labelHeight\n    let maxX = 0\n    let maxY = 0\n    do {\n      const dim = this._visit(next, 0, shiftX, shiftY, param)\n      shiftX = param.hmargin\n      maxX = (maxX < dim.horizontal) ? dim.horizontal : maxX\n      shiftY += dim.vertical\n      maxY = shiftY\n      next = this._graph.nodes.find(node => node.level === -1)\n    } while (next != null)\n\n    const container = this._graph._container\n    this._graph.width = (container?.label && container.width &&\n                         container.width > maxX + param.hmargin)\n      ? container.width : maxX + param.hmargin\n    this._graph.height = maxY + param.vmargin\n\n    for (const edge of this._graph.edges)\n      edge.update()\n  }\n\n  _visit (node, level, shiftX, shiftY, param) {\n    node.level = level\n    if (node.width == null) node.width = param.width\n    if (node.height == null) node.height = param.height\n    node.x = shiftX\n    node.y = shiftY\n    const children =\n         this._graph.edges.filter(edge => edge.source === node)\n    let cVertical = node.height + param.vspace\n    if (children.length > 0) {\n      for (const ch of children) {\n        if (ch.target !== ch.source && ch.target.level === -1) {\n          const dim = this._visit(\n            ch.target, level + 1,\n            shiftX + param.hspace, shiftY + cVertical, param)\n          cVertical += dim.vertical\n        }\n      }\n    }\n    return { horizontal: shiftX + node.width + param.hspace,\n             vertical: cVertical }\n  }\n}\n\nGraphLayoutVH.parameters = Object.assign(\n  Object.assign({}, GraphLayout.parameters),\n  {\n   'node-horizontal-spacing': 20,\n   'node-vertical-spacing': 10\n  }\n)","/* The root of an SVG graph\n **************************/\n\nimport { GraphNode } from './node'\nimport { GraphEdge } from './edge'\nimport { GraphLayout } from './layout'\n\nexport class Graph {\n  constructor (container, label, layout, action, bus) {\n    this._container = container\n    this._label = label\n    this._action = action\n    this._bus = bus\n\n    this.clearGraph()\n\n    this._presentation = document.createElementNS('http://www.w3.org/2000/svg', 'g')\n    this._layout = GraphLayout.create(layout)\n    this._layout.attach(this)\n  }\n\n  get label () {\n    return this._label\n  }\n\n  set label (newValue) {\n    this._label = newValue\n  }\n\n  get width () {\n    return this._container.graphWidth\n  }\n\n  set width (newValue) {\n    this._container.graphWidth = newValue\n  }\n\n  get height () {\n    return this._container.graphHeight\n  }\n\n  set height (newValue) {\n    this._container.graphHeight = newValue\n  }\n\n  get nodes () {\n    return this._nodes\n  }\n\n  get edges () {\n    return this._edges\n  }\n\n  get action () {\n    return this._action\n  }\n\n  set action (newValue) {\n    this._action = action\n  }\n\n  addPiece (type, piece) {\n    this[`_${type}s`].push(piece)\n    if (piece.presentation != null) {\n      this._presentation.appendChild(piece.presentation)\n      if (this._action && type === 'node') {\n        piece.action = this._action\n        piece.bus = this._bus\n      }\n    }\n    if (this._layout != null) { this._layout.organize() }\n  }\n\n  clearGraph () {\n    if (this._nodes)\n      for (let n of this._nodes)\n        if (n.presentation != null)\n          this._presentation.removeChild(n.presentation)\n    if (this._edges)\n      for (let e of this._edges)\n        if (e.presentation != null)\n          this._presentation.removeChild(e.presentation)\n    this._nodes = []\n    this._edges = []\n  }\n\n  importGraph (graphObj) {\n    for (const node of graphObj.nodes) {\n      const gnode = new GraphNode(node)\n      if (node.graph) {\n        gnode.graph = new Graph(gnode, node.label,\n          this._layout.label, this._action, this._bus)\n        gnode.graph.importGraph(node.graph)\n      }\n      this.addPiece('node', gnode)\n    }\n    for (const edge of graphObj.edges) {\n      this.addPiece('edge', GraphEdge.create(edge, this))\n    }\n  }\n\n  get presentation () {\n    return this._presentation\n  }\n\n  get labelHeight () {\n    return (this._label != null)\n      ? GraphLayout.parameters['node-label-height'] : 0\n  }\n}\n\n","/* Graph Oid\n  **********/\n\nimport { html, Oid, OidUI }  from '/lib/foundation/oidlib-dev.js'\nimport { GraphNode } from './node.js'\nimport { GraphEdge } from './edge.js'\nimport { Graph } from './graph.js'\n\nexport class GraphOid extends OidUI {\n  async connectedCallback () {\n    await super.connectedCallback()\n\n    this._graph = new Graph(this, this.label,\n      this.layout, this.action, this._bus)\n\n    // applies a pending import graph\n    if (this._graphObj) {\n      this._graph.importGraph(this._graphObj)\n      this._graphObj = undefined\n    } else\n      this._callCustom('graph')\n\n    this._presentation.appendChild(this._graph.presentation)\n  }\n\n  /* Non-observed Properties\n      ***********************/\n\n  get graph () {\n    return this._graph\n  }\n\n  get graphWidth () {\n    return this._presentation.getAttribute('width')\n  }\n\n  set graphWidth (newValue) {\n    this._presentation.setAttribute('width', newValue)\n  }\n\n  get graphHeight () {\n    return this._presentation.getAttribute('height')\n  }\n\n  set graphHeight (newValue) {\n    this._presentation.setAttribute('height', newValue)\n  }\n\n  /*****/\n\n  addPiece (type, piece) {\n    this._graph.addPiece(type, piece)\n  }\n\n  importGraph (graphObj) {\n    if (this._graph != null) {\n      this._graph.importGraph(graphObj)\n    } else {\n      this._graphObj = graphObj\n    }\n  }\n\n  /*\n   * Event Handlers\n    ****************/\n\n  handleAddNode (topic, message) {\n    this._graph.addPiece('node', new GraphNode(message))\n  }\n\n  handleAddEdge (topic, message) {\n    this._graph.addPiece('edge', GraphEdge.create(message, this._graph))\n  }\n\n  handleClearGraph () {\n    this._graph.clearGraph()\n  }\n}\n\nOid.component({\n  id: 'goid:graph',\n  element: 'graph-oid',\n  properties: {\n    label: {default: 'Graph'},\n    width: {default: 300},\n    height: {default: 200},\n    layout: {},\n    action: {}\n  },\n  receive: {\n    'node/add': 'handleAddNode',\n    'edge/add': 'handleAddEdge',\n    'graph/clear': 'handleClearGraph'\n  },\n  implementation: GraphOid,\n  stylesheets: 'stylesheets:oid-graph.css',\n  template: html`\n  <div id=\"graph-wrapper\">\n    <svg id=\"oid-prs\" width=\"{{this.width}}\" height=\"{{this.height}}\" xmlns=\"http://www.w3.org/2000/svg\">\n    </svg>\n  </div>`\n})"],"names":["GraphLayoutDG","action"],"mappings":"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"}